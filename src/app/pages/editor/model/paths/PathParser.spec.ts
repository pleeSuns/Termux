/* tslint:disable:max-line-length */

import * as PathParser from './PathParser';

class Test {
  constructor(readonly before: string, readonly after: string) {}
}

class Spec {
  readonly tests: ReadonlyArray<Test>;
  constructor(readonly description: string, ...tests: Test[]) {
    this.tests = tests;
  }
}

const specs = [
  new Spec(`empty path data`, new Test(``, ``)),
  new Spec(
    `paths with shorthand lineto commands`,
    new Test(`M 0 0 10 10 20 20 30 30`, `M 0 0 L 10 10 L 20 20 L 30 30`),
    new Test(`M 0 0 h 10 v 10 h -10 v -10`, `M 0 0 L 10 0 L 10 10 L 0 10 L 0 0`),
  ),
  new Spec(
    `sub paths begin with lowercase 'm'`,
    new Test(`m 9 7 -1 1 -8 -8 L 10 10 Z`, `M 9 7 L 8 8 L 0 0 L 10 10 Z`),
    new Test(`m -1 1 -15 0 0 -2 15 0 Z`, `M -1 1 L -16 1 L -16 -1 L -1 -1 Z`),
    new Test(
      `m 9 7 -1 1 -8 -8 L 10 10 Z m -1 1 -15 0 0 -2 15 0 Z`,
      `M 9 7 L 8 8 L 0 0 L 10 10 Z M 8 8 L -7 8 L -7 6 L 8 6 Z`,
    ),
  ),
  new Spec(
    `sub path begins with lineto command`,
    new Test(`l0.0.0.5.0.0.5-0.5.0.0-.5z`, `L 0 0 L 0.5 0 L 0.5 0.5 L 0 0.5 L 0 0 Z`),
  ),
  new Spec(
    `convert arcs to cubic bezier curves`,
    new Test(
      `M 0 0 A 5 5 0 1 0 10 0`,
      `M 0 0 C 0 1.326 0.527 2.598 1.464 3.536 C 2.402 4.473 3.674 5 5 5 C 6.326 5 7.598 4.473 8.536 3.536 C 9.473 2.598 10 1.326 10 0`,
    ),
    new Test(
      `M300,70 a230,230 0 1,0 1,0 z`,
      `M 300 70 C 239.067 70.132 180.616 94.474 137.6 137.63 C 94.585 180.787 70.434 239.316 70.5 300.249 C 70.566 361.183 94.844 419.66 137.954 462.722 C 181.064 505.785 239.567 529.999 300.5 529.999 C 361.433 529.999 419.936 505.785 463.046 462.722 C 506.156 419.66 530.434 361.183 530.5 300.249 C 530.566 239.316 506.415 180.787 463.4 137.63 C 420.384 94.474 361.933 70.132 301 70 Z`,
    ),
  ),
  new Spec(
    `paths w/ complex arcs and curves`,
    new Test(
      `M54,9.422c-6.555,6.043-13.558,13.787-17.812,22.27C31.93,23.209,24.926,15.465,18.372,9.422a101.486,101.486,0,0,0,17.811,1.564A101.5,101.5,0,0,0,54,9.422M72.367,0A96.572,96.572,0,0,1,36.183,6.986,96.567,96.567,0,0,1,0,0S36.183,23.482,36.183,46.964C36.183,23.482,72.367,0,72.367,0Z`,
      `M 54 9.422 C 47.445 15.465 40.442 23.209 36.188 31.692 C 31.93 23.209 24.926 15.465 18.372 9.422 C 24.251 10.466 30.212 10.99 36.183 10.986 C 42.156 10.99 48.119 10.467 54 9.422 M 72.367 0 C 60.866 4.63 48.581 7.002 36.183 6.986 C 23.786 7.002 11.5 4.63 0 0 C 0 0 36.183 23.482 36.183 46.964 C 36.183 23.482 72.367 0 72.367 0 Z`,
    ),
    new Test(
      `M 10 80 C 38.333 33.333 66.666 33.333 95 80 T 180 80`,
      `M 10 80 C 38.333 33.333 66.666 33.333 95 80 Q 95 80 180 80`,
    ),
    new Test(
      `M10 80 Q 52.5 10, 95 80 T 180 80 S 150 150, 180 80`,
      `M 10 80 Q 52.5 10 95 80 Q 137.5 150 180 80 C 180 80 150 150 180 80`,
    ),
  ),
  new Spec(
    `path w/ scientific notation`,
    new Test(`M2.000000,22.000000l20.000000,0.000000 1e0-2e3z`, `M 2 22 L 22 22 L 23 -1978 Z`),
  ),
  new Spec(
    `miscellaneous paths`,
    new Test(
      `M 1 1 m 2 2, l 3 3 L 3 3 H 4 h4 V5 v5, Q6 6 6 6 q 6 6 6 6t 7 7 T 7 7 C 8 8 8 8 8 8 c 8 8 8 8 8 8 S 9 9 9 9 s 9 9 9 9 A 10 10 0 1 1 10 10 a 10 10 0 1 1 10 10`,
      `M 1 1 M 3 3 L 6 6 L 3 3 L 4 3 L 8 3 L 8 5 L 8 10 Q 6 6 6 6 Q 12 12 12 12 Q 12 12 19 19 Q 26 26 7 7 C 8 8 8 8 8 8 C 16 16 16 16 16 16 C 16 16 9 9 9 9 C 9 9 18 18 18 18 C 18.448 20.404 17.998 22.891 16.738 24.987 C 15.477 27.082 13.49 28.644 11.156 29.374 C 8.822 30.105 6.299 29.954 4.069 28.952 C 1.838 27.949 0.051 26.162 -0.952 23.931 C -1.954 21.701 -2.105 19.178 -1.374 16.844 C -0.644 14.51 0.918 12.523 3.013 11.262 C 5.109 10.002 7.596 9.552 10 10 C 10 7.349 11.054 4.804 12.929 2.929 C 14.804 1.054 17.349 0 20 0 C 22.651 0 25.196 1.054 27.071 2.929 C 28.946 4.804 30 7.349 30 10 C 30 12.651 28.946 15.196 27.071 17.071 C 25.196 18.946 22.651 20 20 20`,
    ),
    new Test(
      `M 0.0,-1.0 l 0.0,0.0 c 0.5522847498,0.0 1.0,0.4477152502 1.0,1.0 l 0.0,0.0 c 0.0,0.5522847498 -0.4477152502,1.0 -1.0,1.0 l 0.0,0.0 c -0.5522847498,0.0 -1.0,-0.4477152502 -1.0,-1.0 l 0.0,0.0 c 0.0,-0.5522847498 0.4477152502,-1.0 1.0,-1.0 Z M 7.0,-9.0 c 0.0,0.0 -14.0,0.0 -14.0,0.0 c -1.1044921875,0.0 -2.0,0.8955078125 -2.0,2.0 c 0.0,0.0 0.0,14.0 0.0,14.0 c 0.0,1.1044921875 0.8955078125,2.0 2.0,2.0 c 0.0,0.0 14.0,0.0 14.0,0.0 c 1.1044921875,0.0 2.0,-0.8955078125 2.0,-2.0 c 0.0,0.0 0.0,-14.0 0.0,-14.0 c 0.0,-1.1044921875 -0.8955078125,-2.0 -2.0,-2.0 c 0.0,0.0 0.0,0.0 0.0,0.0 Z`,
      `M 0 -1 L 0 -1 C 0.552 -1 1 -0.552 1 0 L 1 0 C 1 0.552 0.552 1 0 1 L 0 1 C -0.552 1 -1 0.552 -1 0 L -1 0 C -1 -0.552 -0.552 -1 0 -1 Z M 7 -9 C 7 -9 -7 -9 -7 -9 C -8.104 -9 -9 -8.104 -9 -7 C -9 -7 -9 7 -9 7 C -9 8.104 -8.104 9 -7 9 C -7 9 7 9 7 9 C 8.104 9 9 8.104 9 7 C 9 7 9 -7 9 -7 C 9 -8.104 8.104 -9 7 -9 C 7 -9 7 -9 7 -9 Z`,
    ),
    new Test(
      `M5.3,13.2c-0.1,0.0 -0.3,0.0 -0.4,-0.1c-0.3,-0.2 -0.4,-0.7 -0.2,-1.0c1.3,-1.9 2.9,-3.4 4.9,-4.5c4.1,-2.2 9.3,-2.2 13.4,0.0c1.9,1.1 3.6,2.5 4.9,4.4c0.2,0.3 0.1,0.8 -0.2,1.0c-0.3,0.2 -0.8,0.1 -1.0,-0.2c-1.2,-1.7 -2.6,-3.0 -4.3,-4.0c-3.7,-2.0 -8.3,-2.0 -12.0,0.0c-1.7,0.9 -3.2,2.3 -4.3,4.0C5.7,13.1 5.5,13.2 5.3,13.2z`,
      `M 5.3 13.2 C 5.2 13.2 5 13.2 4.9 13.1 C 4.6 12.9 4.5 12.4 4.7 12.1 C 6 10.2 7.6 8.7 9.6 7.6 C 13.7 5.4 18.9 5.4 23 7.6 C 24.9 8.7 26.6 10.1 27.9 12 C 28.1 12.3 28 12.8 27.7 13 C 27.4 13.2 26.9 13.1 26.7 12.8 C 25.5 11.1 24.1 9.8 22.4 8.8 C 18.7 6.8 14.1 6.8 10.4 8.8 C 8.7 9.7 7.2 11.1 6.1 12.8 C 5.7 13.1 5.5 13.2 5.3 13.2 Z`,
    ),
  ),
];

describe('PathParser', () => {
  for (const { description, tests } of specs) {
    it(description, () => {
      for (const { before, after } of tests) {
        expect(PathParser.commandsToString(PathParser.parseCommands(before))).toEqual(after);
      }
    });
  }
});
